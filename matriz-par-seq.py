# -*- coding: utf-8 -*-
"""Matrix_Par_Seq_Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Kv--scVJCLp5txRhu6Ai6SoQwybz_gb

**Librerias**
"""

import numpy as np
import time
import multiprocessing

"""**Función para multiplicación de matrices secuencial**"""

def matrix_multiply_sequential(matrix1, matrix2):
    start_time = time.time()

    result = np.dot(matrix1, matrix2)

    end_time = time.time()
    execution_time = end_time - start_time

    return result, execution_time

"""**Función para multiplicación de matrices en paralelo**"""

def matrix_multiply_parallel(matrix1, matrix2):
    start_time = time.time()

    num_cores = multiprocessing.cpu_count()

    matrix1_slices = np.array_split(matrix1, num_cores, axis=0)
    matrix2_slices = np.array_split(matrix2, num_cores, axis=1)

    pool = multiprocessing.Pool(processes=20)

    results = pool.starmap(np.dot, zip(matrix1_slices, matrix2_slices))

    result = np.hstack(results)

    pool.close()
    pool.join()

    end_time = time.time()
    execution_time = end_time - start_time

    return result, execution_time

"""**Tamaño de la Matriz**"""

matrix_size = 10000

"""**Crear matrices aleatorias**"""

matrix1 = np.random.rand(matrix_size, matrix_size)
matrix2 = np.random.rand(matrix_size, matrix_size)

"""**Multiplicar matrices secuencialmente**"""

result_sequential, time_sequential = matrix_multiply_sequential(matrix1, matrix2)

"""**Multiplicar matrices en paralelo**"""

result_parallel, time_parallel = matrix_multiply_parallel(matrix1, matrix2)

"""**Imprimir tiempos secuenciales y paralelos**"""

print("Sequential execution time:", time_sequential, "seconds")
print("Parallel execution time:", time_parallel, "seconds")

"""**Calcular speedup y eficiencia**

"""

speedup = time_sequential / time_parallel
num_cores = multiprocessing.cpu_count()
efficiency = speedup / num_cores

"""**Imprimir el SpeedUp y la Efficiency**"""

print("Speedup:", speedup)
print("Efficiency:", efficiency)